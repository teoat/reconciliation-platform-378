# ============================================================================
# PRODUCTION DOCKER COMPOSE
# ============================================================================
# Reconciliation Platform - Production Deployment
# ============================================================================
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
# ============================================================================
# Last Updated: January 2025
# Status: Production Ready âœ…
# ============================================================================

version: '3.8'

services:
  # ==========================================================================
  # POSTGRESQL DATABASE - PRODUCTION CONFIG
  # ==========================================================================
  postgres:
    environment:
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C --locale=C"
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '2.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command:
      - postgres
      - -c
      - max_connections=100
      - -c
      - shared_buffers=1GB
      - -c
      - effective_cache_size=3GB
      - -c
      - maintenance_work_mem=256MB
      - -c
      - checkpoint_completion_target=0.9
      - -c
      - wal_buffers=16MB
      - -c
      - default_statistics_target=100
      - -c
      - random_page_cost=1.1
      - -c
      - effective_io_concurrency=200

  # ==========================================================================
  # REDIS CACHE - PRODUCTION CONFIG
  # ==========================================================================
  redis:
    command:
      - redis-server
      - /usr/local/etc/redis/redis.conf
      - --maxmemory
      - "512mb"
      - --maxmemory-policy
      - "allkeys-lru"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================================================
  # BACKEND API - PRODUCTION CONFIG
  # ==========================================================================
  backend:
    build:
      args:
        - BUILD_MODE=release
        - RUSTFLAGS="-C target-cpu=native"
    environment:
      ENV: production
      RUST_LOG: warn,reconciliation_backend=info
      LOG_FORMAT: json
      WORKER_THREADS: 4
      MAX_FILE_SIZE: 10485760
      CACHE_ENABLED: "true"
      CACHE_L1_SIZE: 2000
      METRICS_ENABLED: "true"
      HEALTH_CHECK_ENABLED: "true"
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: " sizes"
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:2000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 40s

  # ==========================================================================
  # FRONTEND - PRODUCTION CONFIG
  # ==========================================================================
  frontend:
    environment:
      NODE_ENV: production
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: always

  # ==========================================================================
  # PROMETHEUS - PRODUCTION CONFIG
  # ==========================================================================
  prometheus:
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/usr/share/prometheus13/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
    volumes:
      - prometheus_data:/prometheus
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./infrastructure/monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro

  # ==========================================================================
  # GRAFANA - PRODUCTION CONFIG
  # ==========================================================================
  grafana:
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_ROOT_URL: https://grafana.yourdomain.com
      GF_SMTP_ENABLED: "true"
      GF_SMTP_HOST: smtp.gmail.com:587
      GF_SMTP_USER: your-email@gmail.com
      GF_SMTP_PASSWORD: your-password
      GF_SMTP_FROM_ADDRESS: your-email@gmail.com
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  reconciliation-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
