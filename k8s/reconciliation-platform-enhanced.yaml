# Enhanced Kubernetes Deployment Configuration with Service Mesh
apiVersion: v1
kind: Namespace
metadata:
  name: reconciliation-platform
  labels:
    name: reconciliation-platform
    istio-injection: enabled
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: reconciliation-config
  namespace: reconciliation-platform
data:
  NODE_ENV: "production"
  PORT: "8080"
  LOG_LEVEL: "info"
  CLUSTER_MODE: "true"
  RUST_LOG: "info"
  RUST_BACKTRACE: "1"
---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: reconciliation-secrets
  namespace: reconciliation-platform
type: Opaque
data:
  DB_PASSWORD: <base64-encoded-password>
  JWT_SECRET: <base64-encoded-jwt-secret>
  JWT_REFRESH_SECRET: <base64-encoded-jwt-refresh-secret>
  REDIS_PASSWORD: <base64-encoded-redis-password>
  GRAFANA_PASSWORD: <base64-encoded-grafana-password>
  SENTRY_DSN: <base64-encoded-sentry-dsn>
  NEW_RELIC_LICENSE_KEY: <base64-encoded-newrelic-key>
---
# Service Account for backend
apiVersion: v1
kind: ServiceAccount
metadata:
  name: reconciliation-backend-sa
  namespace: reconciliation-platform
---
# ClusterRole for backend
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: reconciliation-backend-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
# ClusterRoleBinding for backend
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: reconciliation-backend-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: reconciliation-backend-role
subjects:
- kind: ServiceAccount
  name: reconciliation-backend-sa
  namespace: reconciliation-platform
---
# Rust Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reconciliation-backend-rust
  namespace: reconciliation-platform
  labels:
    app: reconciliation-backend-rust
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: reconciliation-backend-rust
  template:
    metadata:
      labels:
        app: reconciliation-backend-rust
        version: v1
      annotations:
        sidecar.istio.io/inject: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: reconciliation-backend-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: backend-rust
        image: reconciliation-backend-rust:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: reconciliation-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: reconciliation-config
              key: PORT
        - name: RUST_LOG
          valueFrom:
            configMapKeyRef:
              name: reconciliation-config
              key: RUST_LOG
        - name: DATABASE_URL
          value: "postgresql://$(DB_USER):$(DB_PASSWORD)@postgres-service:5432/$(DB_NAME)"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379"
        - name: DB_USER
          value: "reconciliation_user"
        - name: DB_NAME
          value: "reconciliation_prod"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: reconciliation-secrets
              key: DB_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: reconciliation-secrets
              key: REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: reconciliation-secrets
              key: JWT_SECRET
        - name: JWT_REFRESH_SECRET
          valueFrom:
            secretKeyRef:
              name: reconciliation-secrets
              key: JWT_REFRESH_SECRET
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: reconciliation-secrets
              key: SENTRY_DSN
        - name: NEW_RELIC_LICENSE_KEY
          valueFrom:
            secretKeyRef:
              name: reconciliation-secrets
              key: NEW_RELIC_LICENSE_KEY
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "1Gi"
            cpu: "1000m"
            ephemeral-storage: "2Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: uploads-volume
          mountPath: /app/uploads
        - name: logs-volume
          mountPath: /app/logs
        - name: backups-volume
          mountPath: /app/backups
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: uploads-volume
        persistentVolumeClaim:
          claimName: uploads-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: logs-pvc
      - name: backups-volume
        persistentVolumeClaim:
          claimName: backups-pvc
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: reconciliation-backend-service
  namespace: reconciliation-platform
  labels:
    app: reconciliation-backend-rust
spec:
  selector:
    app: reconciliation-backend-rust
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  type: ClusterIP
---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reconciliation-frontend
  namespace: reconciliation-platform
  labels:
    app: reconciliation-frontend
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: reconciliation-frontend
  template:
    metadata:
      labels:
        app: reconciliation-frontend
        version: v1
      annotations:
        sidecar.istio.io/inject: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: frontend
        image: reconciliation-frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: reconciliation-config
              key: NODE_ENV
        - name: NEXT_PUBLIC_API_URL
          value: "http://reconciliation-backend-service:8080"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: tmp-volume
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: reconciliation-frontend-service
  namespace: reconciliation-platform
  labels:
    app: reconciliation-frontend
spec:
  selector:
    app: reconciliation-frontend
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  type: ClusterIP
---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: reconciliation-platform
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        env:
        - name: POSTGRES_DB
          value: "reconciliation_prod"
        - name: POSTGRES_USER
          value: "reconciliation_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: reconciliation-secrets
              key: DB_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
            ephemeral-storage: "10Gi"
          limits:
            memory: "2Gi"
            cpu: "2000m"
            ephemeral-storage: "20Gi"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - reconciliation_user
            - -d
            - reconciliation_prod
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - reconciliation_user
            - -d
            - reconciliation_prod
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          capabilities:
            drop:
            - ALL
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 100Gi
      storageClassName: "fast-ssd"
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: reconciliation-platform
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  type: ClusterIP
---
# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: reconciliation-platform
spec:
  serviceName: redis-service
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        command: ["redis-server"]
        args: 
        - "--requirepass"
        - "$(REDIS_PASSWORD)"
        - "--appendonly"
        - "yes"
        - "--appendfsync"
        - "everysec"
        - "--maxmemory"
        - "256mb"
        - "--maxmemory-policy"
        - "allkeys-lru"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: reconciliation-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - "--no-auth-warning"
            - "-a"
            - "$(REDIS_PASSWORD)"
            - "ping"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - "--no-auth-warning"
            - "-a"
            - "$(REDIS_PASSWORD)"
            - "ping"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          capabilities:
            drop:
            - ALL
  volumeClaimTemplates:
  - metadata:
      name: redis-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
      storageClassName: "fast-ssd"
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: reconciliation-platform
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  type: ClusterIP
---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: uploads-pvc
  namespace: reconciliation-platform
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: "fast-ssd"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logs-pvc
  namespace: reconciliation-platform
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
  storageClassName: "fast-ssd"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backups-pvc
  namespace: reconciliation-platform
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: "fast-ssd"
---
# Horizontal Pod Autoscaler for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: reconciliation-backend-hpa
  namespace: reconciliation-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: reconciliation-backend-rust
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max
---
# Horizontal Pod Autoscaler for Frontend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: reconciliation-frontend-hpa
  namespace: reconciliation-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: reconciliation-frontend
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 15
      selectPolicy: Max
---
# Pod Disruption Budget for Backend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: reconciliation-backend-pdb
  namespace: reconciliation-platform
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: reconciliation-backend-rust
---
# Pod Disruption Budget for Frontend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: reconciliation-frontend-pdb
  namespace: reconciliation-platform
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: reconciliation-frontend
---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: reconciliation-network-policy
  namespace: reconciliation-platform
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: reconciliation-platform
    - podSelector: {}
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: reconciliation-platform
    - podSelector: {}
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
---
# Istio Gateway
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: reconciliation-gateway
  namespace: reconciliation-platform
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - yourdomain.com
    - api.yourdomain.com
    tls:
      httpsRedirect: true
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - yourdomain.com
    - api.yourdomain.com
    tls:
      mode: SIMPLE
      credentialName: reconciliation-tls
---
# Istio VirtualService for Frontend
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: reconciliation-frontend-vs
  namespace: reconciliation-platform
spec:
  hosts:
  - yourdomain.com
  gateways:
  - reconciliation-gateway
  http:
  - match:
    - uri:
        prefix: /api/
    route:
    - destination:
        host: reconciliation-backend-service
        port:
          number: 8080
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
  - match:
    - uri:
        prefix: /socket.io/
    route:
    - destination:
        host: reconciliation-backend-service
        port:
          number: 8080
    timeout: 86400s
  - route:
    - destination:
        host: reconciliation-frontend-service
        port:
          number: 3000
    timeout: 30s
---
# Istio VirtualService for API
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: reconciliation-api-vs
  namespace: reconciliation-platform
spec:
  hosts:
  - api.yourdomain.com
  gateways:
  - reconciliation-gateway
  http:
  - route:
    - destination:
        host: reconciliation-backend-service
        port:
          number: 8080
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
---
# Istio DestinationRule for Backend
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: reconciliation-backend-dr
  namespace: reconciliation-platform
spec:
  host: reconciliation-backend-service
  trafficPolicy:
    loadBalancer:
      simple: LEAST_CONN
    connectionPool:
      tcp:
        maxConnections: 10
      http:
        http1MaxPendingRequests: 10
        maxRequestsPerConnection: 2
    circuitBreaker:
      consecutiveErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
---
# Istio DestinationRule for Frontend
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: reconciliation-frontend-dr
  namespace: reconciliation-platform
spec:
  host: reconciliation-frontend-service
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    connectionPool:
      tcp:
        maxConnections: 10
      http:
        http1MaxPendingRequests: 10
        maxRequestsPerConnection: 2
---
# Istio AuthorizationPolicy
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: reconciliation-auth-policy
  namespace: reconciliation-platform
spec:
  selector:
    matchLabels:
      app: reconciliation-backend-rust
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/reconciliation-platform/sa/reconciliation-backend-sa"]
    - source:
        principals: ["cluster.local/ns/reconciliation-platform/sa/reconciliation-frontend-sa"]
    to:
    - operation:
        methods: ["GET", "POST", "PUT", "DELETE", "PATCH"]
        paths: ["/api/*"]
  - from:
    - source:
        principals: ["cluster.local/ns/reconciliation-platform/sa/reconciliation-frontend-sa"]
    to:
    - operation:
        methods: ["GET", "POST"]
        paths: ["/socket.io/*"]
