# SSOT: Kubernetes Deployment Configuration (LOCKED)
# This manifest is the single source of truth for K8s deployment.
# Modify here only; managed by SSOT process.
apiVersion: v1
kind: Namespace
metadata:
  name: reconciliation-platform
  labels:
    name: reconciliation-platform
    app.kubernetes.io/managed-by: ssot
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: reconciliation-config
  namespace: reconciliation-platform
data:
  NODE_ENV: "production"
  PORT: "2000"
  LOG_LEVEL: "info"
  CLUSTER_MODE: "true"
---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: reconciliation-secrets
  namespace: reconciliation-platform
type: Opaque
data:
  DB_PASSWORD: <base64-encoded-password>
  JWT_SECRET: <base64-encoded-jwt-secret>
  REDIS_PASSWORD: <base64-encoded-redis-password>
  GRAFANA_PASSWORD: <base64-encoded-grafana-password>
---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reconciliation-backend
  namespace: reconciliation-platform
  labels:
    app: reconciliation-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: reconciliation-backend
  template:
    metadata:
      labels:
        app: reconciliation-backend
    spec:
      containers:
      - name: backend
        image: reconciliation-backend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 2000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: reconciliation-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: reconciliation-config
              key: PORT
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: reconciliation-secrets
              key: DB_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: reconciliation-secrets
              key: JWT_SECRET
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: reconciliation-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 2000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 2000
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Horizontal Pod Autoscaler for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
   name: backend-hpa
   namespace: reconciliation-platform
 spec:
   scaleTargetRef:
     apiVersion: apps/v1
     kind: Deployment
     name: reconciliation-backend
   minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 30
      selectPolicy: Max
---
# PodDisruptionBudget for Backend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: backend-pdb
  namespace: reconciliation-platform
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: reconciliation-backend
---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: reconciliation-backend-service
  namespace: reconciliation-platform
spec:
  selector:
    app: reconciliation-backend
  ports:
  - port: 2000
    targetPort: 2000
  type: ClusterIP
---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reconciliation-frontend
  namespace: reconciliation-platform
  labels:
    app: reconciliation-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: reconciliation-frontend
  template:
    metadata:
      labels:
        app: reconciliation-frontend
    spec:
      containers:
      - name: frontend
        image: reconciliation-frontend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: reconciliation-config
              key: NODE_ENV
        - name: NEXT_PUBLIC_API_URL
          value: "http://reconciliation-backend-service:2000"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: reconciliation-frontend-service
  namespace: reconciliation-platform
spec:
  selector:
    app: reconciliation-frontend
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: reconciliation-platform
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "reconciliation_prod"
        - name: POSTGRES_USER
          value: "reconciliation_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: reconciliation-secrets
              key: DB_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 100Gi
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: reconciliation-platform
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
# Redis Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: reconciliation-platform
spec:
  serviceName: redis-service
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - sh
        - -c
        - redis-server --requirepass "$$REDIS_PASSWORD"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: reconciliation-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
  volumeClaimTemplates:
  - metadata:
      name: redis-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: reconciliation-platform
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
# Horizontal Pod Autoscaler for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: reconciliation-backend-hpa
  namespace: reconciliation-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: reconciliation-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
# Horizontal Pod Autoscaler for Frontend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: reconciliation-frontend-hpa
  namespace: reconciliation-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: reconciliation-frontend
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: reconciliation-ingress
  namespace: reconciliation-platform
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - yourdomain.com
    - api.yourdomain.com
    secretName: reconciliation-tls
  rules:
  - host: yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: reconciliation-frontend-service
            port:
              number: 3000
  - host: api.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: reconciliation-backend-service
            port:
              number: 2000
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: reconciliation-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus
        command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=200h'
        - '--web.enable-lifecycle'
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: reconciliation-platform
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: reconciliation-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: reconciliation-secrets
              key: GRAFANA_PASSWORD
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage
---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: reconciliation-platform
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP
---
# Persistent Volume Claims
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: reconciliation-platform
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'reconciliation-platform'
        environment: 'production'

    scrape_configs:
      - job_name: 'reconciliation-backend'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - reconciliation-platform
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: reconciliation-backend-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: http
        metrics_path: '/api/v1/metrics'
        scheme: http

      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: reconciliation-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: reconciliation-platform
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: reconciliation-network-policy
  namespace: reconciliation-platform
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: reconciliation-platform
    - podSelector: {}
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: reconciliation-platform
    - podSelector: {}
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: reconciliation-backend-pdb
  namespace: reconciliation-platform
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: reconciliation-backend
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: reconciliation-frontend-pdb
  namespace: reconciliation-platform
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: reconciliation-frontend
