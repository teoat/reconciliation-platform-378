# ============================================================================
# OPTIMIZED DOCKERFILE FOR RUST BACKEND
# ============================================================================

# Builder stage
FROM rust:1.75-alpine AS builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    musl-dev \
    pkgconfig \
    openssl-dev \
    postgresql-dev

# Copy manifests
COPY backend/Cargo.toml backend/Cargo.lock ./

# Create dummy main for caching
RUN mkdir -p src && \
    echo "fn main() {}" > src/main.rs

# Build dependencies
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    cargo build --release && \
    rm -rf src

# Copy source
COPY backend/src ./src
COPY backend/migrations ./migrations

# Build application
RUN --mount=type=cache,target=/usr/local/cargo/registry \
    touch src/main.rs && \
    cargo build --release

# Runtime stage
FROM alpine:latest

RUN apk add --no-cache \
    ca-certificates \
    libssl3 \
    libpq \
    curl

WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S appuser && \
    adduser -u 1001 -S appuser -G appuser

# Copy binaries
COPY --from=builder --chown=appuser:appuser /app/target/release/reconciliation-backend ./reconciliation-backend
COPY --from=builder --chown=appuser:appuser /app/migrations ./migrations

# Create directories
RUN mkdir -p uploads logs && \
    chown -R appuser:appuser /app

USER appuser

EXPOSE 2000

ENV RUST_LOG=info
ENV HOST=0.0.0.0
ENV PORT=2000

HEALTHCHECK --interval=30s --timeout=10s CMD curl -f http://localhost:2000/health || exit 1

CMD ["./reconciliation-backend"]

