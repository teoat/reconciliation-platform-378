# Simplified Docker Compose for 378 Reconciliation Platform
# Development deployment with essential services

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: reconciliation-postgres
    environment:
      POSTGRES_DB: reconciliation_app
      POSTGRES_USER: reconciliation_user
      POSTGRES_PASSWORD: reconciliation_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reconciliation_user -d reconciliation_app"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:6-alpine
    container_name: reconciliation-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: reconciliation-backend
    environment:
      - DATABASE_URL=postgresql://reconciliation_user:reconciliation_pass@postgres:5432/reconciliation_app
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_key_here
      - RUST_LOG=info
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/target
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: reconciliation-frontend
    environment:
      - VITE_API_URL=http://localhost:8080/api
      - VITE_WS_URL=ws://localhost:8080/ws
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: reconciliation-network
