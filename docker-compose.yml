# Docker Compose Configuration for Reconciliation Platform
# This file defines the complete application stack

version: '3.8'

services:
  # PostgreSQL Database
  database:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.database
    container_name: reconciliation-db
    environment:
      POSTGRES_DB: reconciliation_app
      POSTGRES_USER: reconciliation_user
      POSTGRES_PASSWORD: reconciliation_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/backups:/backups
    ports:
      - "5432:5432"
    networks:
      - reconciliation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reconciliation_user -d reconciliation_app"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache
  redis:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.redis
    container_name: reconciliation-redis
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - reconciliation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: reconciliation-backend
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://reconciliation_user:reconciliation_pass@database:5432/reconciliation_app
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379
      
      # Server Configuration
      HOST: 0.0.0.0
      PORT: 8080
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRATION: 86400
      
      # CORS Configuration
      CORS_ORIGINS: http://localhost:3000,http://localhost:5173,http://frontend:80
      
      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL:-info}
      RUST_LOG: ${RUST_LOG:-info}
      
      # File Upload Configuration
      MAX_FILE_SIZE: 10485760
      UPLOAD_PATH: /app/uploads
      
      # Security Configuration
      ENABLE_CSRF_PROTECTION: true
      SESSION_TIMEOUT: 3600000
    volumes:
      - uploads_data:/app/uploads
      - ./logs:/app/logs
    ports:
      - "8080:8080"
    networks:
      - reconciliation-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.frontend
    container_name: reconciliation-frontend
    environment:
      # API Configuration
      VITE_API_URL: http://backend:8080/api
      VITE_WS_URL: ws://backend:8080
      
      # Application Configuration
      VITE_APP_NAME: Reconciliation Platform
      VITE_APP_VERSION: 1.0.0
      VITE_APP_ENVIRONMENT: production
      
      # Feature Flags
      VITE_ENABLE_ANALYTICS: true
      VITE_ENABLE_REALTIME: true
      VITE_ENABLE_COLLABORATION: true
      VITE_ENABLE_AI_FEATURES: true
      
      # Performance Configuration
      VITE_MAX_FILE_SIZE: 10485760
      VITE_UPLOAD_TIMEOUT: 300000
      VITE_API_TIMEOUT: 30000
      
      # Security Configuration
      VITE_ENABLE_CSRF_PROTECTION: true
      VITE_SESSION_TIMEOUT: 3600000
      
      # Production Configuration
      VITE_DEBUG_MODE: false
      VITE_LOG_LEVEL: error
      VITE_ENABLE_MOCK_DATA: false
    ports:
      - "80:80"
      - "443:443"
    networks:
      - reconciliation-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Load Balancer (for production scaling)
  nginx:
    image: nginx:alpine
    container_name: reconciliation-nginx
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
      - ./infrastructure/ssl:/etc/nginx/ssl
    ports:
      - "8080:80"
      - "8443:443"
    networks:
      - reconciliation-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: reconciliation-prometheus
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - reconciliation-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Monitoring with Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: reconciliation-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - reconciliation-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log aggregation with ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: reconciliation-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - reconciliation-network
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: reconciliation-logstash
    volumes:
      - ./infrastructure/logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
    networks:
      - reconciliation-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: reconciliation-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - reconciliation-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

# Networks
networks:
  reconciliation-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local