# ============================================================================
# OPTIMIZED DOCKER COMPOSE - Reconciliation Platform
# ============================================================================
# Single Source of Truth for Docker Deployment
# Supports both development and production via environment variables
# ============================================================================

services:
  # ==========================================================================
  # POSTGRESQL DATABASE
  # ==========================================================================
  postgres:
    image: postgres:15-alpine
    container_name: reconciliation-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-reconciliation_app}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres_pass}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
      # Performance tuning
      shared_buffers: 256MB
      effective_cache_size: 1GB
      maintenance_work_mem: 128MB
      checkpoint_completion_target: 0.9
      wal_buffers: 16MB
      default_statistics_target: 100
      random_page_cost: 1.1
      effective_io_concurrency: 200
      work_mem: 4MB
      min_wal_size: 1GB
      max_wal_size: 4GB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./infrastructure/database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - reconciliation-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-reconciliation_app}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ==========================================================================
  # REDIS CACHE
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: reconciliation-redis
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - reconciliation-network
    restart: unless-stopped
    command:
      - redis-server
      - /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # ==========================================================================
  # BACKEND API (Rust)
  # ==========================================================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend.optimized
      target: runtime
      args:
        - RUST_VERSION=1.75
        - BUILD_TYPE=${BUILD_TYPE:-release}
      cache_from:
        - rust:1.75-alpine
      cache_to:
        - type=registry,ref=reconciliation-backend:buildcache
    container_name: reconciliation-backend
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres_pass}@postgres:5432/${POSTGRES_DB:-reconciliation_app}
      # Redis
      REDIS_URL: redis://redis:6379
      # Server
      HOST: 0.0.0.0
      PORT: 2000
      # JWT
      JWT_SECRET: ${JWT_SECRET:-change-this-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-168h}
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:1000}
      # Logging
      RUST_LOG: ${RUST_LOG:-info}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      # Performance
      WORKER_THREADS: ${WORKER_THREADS:-4}
      MAX_CONNECTIONS: ${MAX_CONNECTIONS:-100}
      # File Upload
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      UPLOAD_PATH: /app/uploads
      # Monitoring
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      METRICS_PORT: 9091
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    ports:
      - "${BACKEND_PORT:-2000}:2000"
      - "9091:9091"  # Metrics port
    networks:
      - reconciliation-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:2000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: ${BACKEND_REPLICAS:-1}
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # ==========================================================================
  # FRONTEND (React/Vite)
  # ==========================================================================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.optimized
      target: runtime
      args:
        - NODE_VERSION=18
        - BUILD_TYPE=${BUILD_TYPE:-production}
      cache_from:
        - node:18-alpine
      cache_to:
        - type=registry,ref=reconciliation-frontend:buildcache
    container_name: reconciliation-frontend
    environment:
      - VITE_API_URL=http://backend:2000/api
      - VITE_WS_URL=ws://backend:2000
      - NODE_ENV=${NODE_ENV:-production}
    ports:
      - "${FRONTEND_PORT:-1000}:80"
    networks:
      - reconciliation-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # ==========================================================================
  # MONITORING: PROMETHEUS
  # ==========================================================================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: reconciliation-prometheus
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - reconciliation-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s

  # ==========================================================================
  # MONITORING: GRAFANA
  # ==========================================================================
  grafana:
    image: grafana/grafana:10.0.0
    container_name: reconciliation-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - reconciliation-network
    depends_on:
      - prometheus
    restart: unless-stopped

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  reconciliation-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    enable_ipv6: false

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis
  uploads_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/uploads
  logs_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/logs
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

