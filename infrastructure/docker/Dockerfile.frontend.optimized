# ============================================================================
# SSOT: FRONTEND DOCKERFILE (LOCKED)
# This is the single source of truth for frontend container builds.
# Modify here only. Do not create alternate Dockerfiles.
# ============================================================================
# ULTIMATE OPTIMIZED MULTI-STAGE DOCKERFILE FOR REACT FRONTEND
# ============================================================================
# Service Name: reconciliation-frontend
# Runtime: Node.js 20 with React/Vite
# Optimization Goal: Minimal image size (~20-30MB final image with Nginx)
# Resource Target: 70% of current usage (175MB RAM, 175m CPU limit)
# ============================================================================

# ============================================================================
# STAGE 1: Build Stage - Full Build Environment
# ============================================================================
FROM node:20-alpine AS builder

# Install only essential build dependencies
RUN apk add --no-cache python3 make g++

# Set working directory
WORKDIR /app

# Copy package files first (for optimal caching)
COPY frontend/package.json frontend/package-lock.json* ./

# Install dependencies with cache mount and prune dev dependencies in production
RUN --mount=type=cache,target=/root/.npm \
    npm ci --only=production --no-audit && \
    npm cache clean --force

# Copy source code
COPY frontend/ ./

# Build the application with production optimizations
ENV NODE_ENV=production
RUN npm run build && \
    # Remove source maps for production (optional, uncomment if needed)
    # find dist -name "*.map" -delete && \
    # Optimize bundle size
    rm -rf node_modules

# ============================================================================
# STAGE 2: Production Runtime - Minimal Nginx Image
# ============================================================================
FROM nginx:alpine AS runtime

LABEL maintainer="Reconciliation Platform Team"
LABEL version="1.0.0"
LABEL description="Optimized React Frontend for Reconciliation Platform"

# Install curl for health checks only
RUN apk add --no-cache curl && \
    rm -rf /var/cache/apk/*

# Remove default nginx configuration
RUN rm -rf /etc/nginx/conf.d/default.conf

# Copy optimized nginx configuration
COPY infrastructure/nginx/nginx.conf /etc/nginx/nginx.conf
COPY infrastructure/nginx/frontend.conf /etc/nginx/conf.d/default.conf

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Create environment configuration script for runtime variable injection
RUN echo '#!/bin/sh' > /docker-entrypoint.d/20-env-config.sh && \
    echo 'for file in /usr/share/nginx/html/assets/*.js; do' >> /docker-entrypoint.d/20-env-config.sh && \
    echo '  [ -f "$file" ] && sed -i "s|VITE_API_URL_PLACEHOLDER|${VITE_API_URL}|g" "$file"' >> /docker-entrypoint.d/20-env-config.sh && \
    echo '  [ -f "$file" ] && sed -i "s|VITE_WS_URL_PLACEHOLDER|${VITE_WS_URL}|g" "$file"' >> /docker-entrypoint.d/20-env-config.sh && \
    echo 'done' >> /docker-entrypoint.d/20-env-config.sh && \
    chmod +x /docker-entrypoint.d/20-env-config.sh

# Expose nginx port
EXPOSE 80

# Health check configuration
HEALTHCHECK --interval=30s --timeout=3s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

