# Optimized frontend Dockerfile (wrapper) - aligns with top-level Dockerfile.frontend

FROM node:18-alpine AS builder
WORKDIR /app/frontend
ARG VITE_API_URL
ARG VITE_WS_URL
# Ensure Vite picks these up at build time
ENV VITE_API_URL=${VITE_API_URL}
ENV VITE_WS_URL=${VITE_WS_URL}
# Copy only frontend package manifests for better cache
COPY frontend/package*.json ./
# Use npm ci if lockfile exists, else fall back to npm install
RUN if [ -f package-lock.json ]; then npm ci --no-audit --no-fund; else npm install --no-audit --no-fund; fi
# Now copy the actual source
COPY frontend/ .
# Build production assets
RUN npm run build

FROM nginx:1.27-alpine
# Static assets
COPY --from=builder /app/frontend/dist /usr/share/nginx/html
# SPA fallback and caching headers with CSP
RUN printf '%s\n' \
  'server {' \
  '  listen 80;' \
  '  server_name _;' \
  '  root /usr/share/nginx/html;' \
  '  index index.html;' \
  '  # CSP headers for frontend (development-friendly)' \
  '  add_header Content-Security-Policy "default-src '\''self'\''; script-src '\''self'\'' '\''unsafe-eval'\'' '\''unsafe-inline'\''; style-src '\''self'\'' '\''unsafe-inline'\''; img-src '\''self'\'' data: https: blob:; font-src '\''self'\'' data:; connect-src '\''self'\'' http://localhost:2000 ws://localhost:2000 http://localhost:1000 ws://localhost:1000 ws://localhost:5173 http://localhost:5173; frame-ancestors '\''none'\''; base-uri '\''self'\''; form-action '\''self'\'';" always;' \
  '  add_header X-Content-Type-Options "nosniff" always;' \
  '  add_header X-Frame-Options "DENY" always;' \
  '  add_header X-XSS-Protection "1; mode=block" always;' \
  '  location / {' \
  '    try_files $uri $uri/ /index.html;' \
  '  }' \
  '  location ~* \.(?:js|css|png|jpg|jpeg|gif|svg|webp|ico)$ {' \
  '    expires 30d;' \
  '    add_header Cache-Control "public, max-age=2592000, immutable";' \
  '    try_files $uri =404;' \
  '  }' \
  '}' \
  > /etc/nginx/conf.d/default.conf
# Ensure at least one CSS file exists to satisfy entrypoint scripts that sed over *.css
RUN sh -c 'ls /usr/share/nginx/html/*.css >/dev/null 2>&1 || touch /usr/share/nginx/html/dummy.css'
# Provide a placeholder vite.svg if the app references it but it isn't present
RUN sh -lc 'if [ ! -f /usr/share/nginx/html/vite.svg ]; then echo "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 256\"><defs><linearGradient id=\"g\" x1=\"0\" x2=\"1\"><stop offset=\"0\" stop-color=\"#646cff\"/><stop offset=\"1\" stop-color=\"#61dafb\"/></linearGradient></defs><rect width=\"256\" height=\"256\" fill=\"url(#g)\"/><text x=\"50%\" y=\"50%\" dominant-baseline=\"middle\" text-anchor=\"middle\" font-family=\"Arial, Helvetica, sans-serif\" font-size=\"28\" fill=\"#fff\">vite.svg</text></svg>" > /usr/share/nginx/html/vite.svg; fi'
# Use default nginx config suitable for static files; custom prod config is intended for /etc/nginx/nginx.conf and requires SSL certs
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

