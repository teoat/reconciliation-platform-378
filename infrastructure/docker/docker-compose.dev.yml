# Docker Compose for Development Environment
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: reconciliation-postgres-dev
    environment:
      POSTGRES_DB: reconciliation_app
      POSTGRES_USER: reconciliation_user
      POSTGRES_PASSWORD: reconciliation_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - reconciliation-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reconciliation_user -d reconciliation_app"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: reconciliation-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - reconciliation-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Rust Backend
  backend:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.backend
    container_name: reconciliation-backend-dev
    environment:
      - DATABASE_URL=postgresql://reconciliation_user:reconciliation_pass@postgres:5432/reconciliation_app
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-here-dev
      - JWT_EXPIRES_IN=24h
      - CORS_ORIGIN=http://localhost:1000
      - MAX_FILE_SIZE=10485760
      - UPLOAD_PATH=/app/uploads
      - NODE_ENV=development
      - RUST_LOG=debug
    ports:
      - "2000:2000"
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - reconciliation-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.frontend
    container_name: reconciliation-frontend-dev
    ports:
      - "1000:80"
    depends_on:
      - backend
    networks:
      - reconciliation-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: reconciliation-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - reconciliation-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: reconciliation-grafana-dev
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - reconciliation-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  reconciliation-network:
    driver: bridge
