# ============================================================================
# OPTIMIZED MULTI-STAGE DOCKERFILE FOR REACT FRONTEND
# ============================================================================
# Features:
# - Multi-stage build for smaller image size
# - Layer caching optimization
# - Production build optimization
# - Static file serving with Nginx
# ============================================================================

# Stage 1: Build Stage
ARG NODE_VERSION=18
FROM node:${NODE_VERSION}-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Set working directory
WORKDIR /app

# Copy package files
COPY frontend/package.json frontend/package-lock.json* ./

# Install dependencies (with cache mount for faster rebuilds)
RUN --mount=type=cache,target=/root/.npm \
    npm install --no-audit

# Copy source code
COPY frontend/ ./

# Build the application
ARG BUILD_TYPE=production
RUN if [ "$BUILD_TYPE" = "production" ]; then \
        npm run build; \
    else \
        npm run build; \
    fi

# Stage 2: Production Runtime
FROM nginx:alpine AS runtime

# Install curl for health checks
RUN apk add --no-cache curl

# Remove default nginx configuration
RUN rm -rf /etc/nginx/conf.d/default.conf

# Copy custom nginx configuration
COPY infrastructure/nginx/nginx.conf /etc/nginx/nginx.conf
COPY infrastructure/nginx/frontend.conf /etc/nginx/conf.d/default.conf

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Create environment configuration script
RUN echo '#!/bin/sh' > /docker-entrypoint.d/env-config.sh && \
    echo 'for file in /usr/share/nginx/html/*.js /usr/share/nginx/html/*.css; do' >> /docker-entrypoint.d/env-config.sh && \
    echo '  sed -i "s|VITE_API_URL|$VITE_API_URL|g" "$file"' >> /docker-entrypoint.d/env-config.sh && \
    echo '  sed -i "s|VITE_WS_URL|$VITE_WS_URL|g" "$file"' >> /docker-entrypoint.d/env-config.sh && \
    echo 'done' >> /docker-entrypoint.d/env-config.sh && \
    chmod +x /docker-entrypoint.d/env-config.sh

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

