# ============================================================================
# ULTIMATE OPTIMIZED KUBERNETES DEPLOYMENT - FRONTEND
# ============================================================================
# Service: reconciliation-frontend
# Runtime: React/Vite with Nginx Alpine
# Resource Limits: 175MB RAM, 175m CPU (70% of baseline)
# Image Size: ~20-30MB
# ============================================================================

---
# ============================================================================
# Deployment Configuration
# ============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reconciliation-frontend
  namespace: reconciliation
  labels:
    app: reconciliation-frontend
    version: v1.0.0
    tier: frontend
    component: web
spec:
  replicas: 3  # Minimum replicas for high availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Zero-downtime deployments
  selector:
    matchLabels:
      app: reconciliation-frontend
  template:
    metadata:
      labels:
        app: reconciliation-frontend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
    spec:
      # Security hardening - non-root user
      securityContext:
        runAsNonRoot: true
        runAsUser: 101  # Nginx user ID
        runAsGroup: 101
        fsGroup: 101
        fsGroupChangePolicy: "Always"
        seccompProfile:
          type: "RuntimeDefault"
      
      containers:
      - name: frontend
        image: reconciliation-frontend:latest  # Replace with your registry
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        
        # Environment variables for runtime configuration
        env:
        - name: VITE_API_URL
          value: "http://reconciliation-backend:2000/api"
        - name: VITE_WS_URL
          value: "ws://reconciliation-backend:2000"
        - name: NODE_ENV
          value: "production"
        
        # Resource configuration - Optimized to 70% of baseline
        resources:
          requests:
            memory: "128Mi"  # Request 128MB (guaranteed)
            cpu: "100m"      # Request 0.1 CPU cores
          limits:
            memory: "175Mi"  # Limit to 175MB (70% of 250MB)
            cpu: "175m"      # Limit to 0.175 CPU cores (70% of 250m)
        
        # Liveness probe - detects unhealthy containers
        livenessProbe:
          httpGet:
            path: /
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Readiness probe - ensures traffic only to ready pods
        readinessProbe:
          httpGet:
            path: /
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Startup probe - for slower-starting applications
        startupProbe:
          httpGet:
            path: /
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12  # Allow up to 1 minute to start
      
      terminationGracePeriodSeconds: 10
      
      # Affinity rules for pod distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - reconciliation-frontend
              topologyKey: kubernetes.io/hostname

---
# ============================================================================
# Service Configuration
# ============================================================================
apiVersion: v1
kind: Service
metadata:
  name: reconciliation-frontend
  namespace: reconciliation
  labels:
    app: reconciliation-frontend
    tier: frontend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: LoadBalancer  # External access for frontend
  selector:
    app: reconciliation-frontend
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  sessionAffinity: ClientIP  # Sticky sessions
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hours

---
# ============================================================================
# Horizontal Pod Autoscaler
# ============================================================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: reconciliation-frontend-hpa
  namespace: reconciliation
  labels:
    app: reconciliation-frontend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: reconciliation-frontend
  minReplicas: 3  # Minimum for HA
  maxReplicas: 10  # Maximum for high traffic
  metrics:
  # CPU-based scaling (primary metric)
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70  # Scale when CPU > 70%
  # Memory-based scaling (secondary metric)
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80  # Scale when Memory > 80%
  
  # Behavioral configuration for smooth scaling
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # Wait 5 min before scaling down
      policies:
      - type: Percent
        value: 25  # Scale down max 25% at a time
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0  # Scale up immediately
      policies:
      - type: Percent
        value: 50  # Scale up max 50% at a time
        periodSeconds: 30
      - type: Pods
        value: 2  # Or add 2 pods at a time
        periodSeconds: 30
      selectPolicy: Max  # Use the most aggressive policy

---
# ============================================================================
# Pod Disruption Budget
# ============================================================================
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: reconciliation-frontend-pdb
  namespace: reconciliation
spec:
  minAvailable: 2  # Always have at least 2 pods available
  selector:
    matchLabels:
      app: reconciliation-frontend

