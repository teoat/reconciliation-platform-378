# Kubernetes Namespace for Staging
apiVersion: v1
kind: Namespace
metadata:
  name: reconciliation-staging
  labels:
    name: reconciliation-staging
    environment: staging
---
# ConfigMap for staging configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: reconciliation-staging-config
  namespace: reconciliation-staging
data:
  NODE_ENV: "staging"
  RUST_LOG: "debug"
  HOST: "0.0.0.0"
  PORT: "8080"
  DB_HOST: "postgres-staging-service"
  DB_PORT: "5432"
  DB_NAME: "reconciliation_staging"
  REDIS_HOST: "redis-staging-service"
  REDIS_PORT: "6379"
  CORS_ORIGIN: "https://staging.reconciliation.example.com"
  ENABLE_METRICS: "true"
  METRICS_PORT: "9090"
  WS_ENABLED: "true"
  WS_PORT: "8081"
  ENABLE_COMPRESSION: "true"
  ENABLE_CACHING: "true"
  MIN_REPLICAS: "1"
  MAX_REPLICAS: "3"
---
# Secret for staging data
apiVersion: v1
kind: Secret
metadata:
  name: reconciliation-staging-secrets
  namespace: reconciliation-staging
type: Opaque
data:
  DB_PASSWORD: <base64-encoded-staging-password>
  REDIS_PASSWORD: <base64-encoded-redis-password>
  JWT_SECRET: <base64-encoded-jwt-secret>
---
# PostgreSQL Service for Staging
apiVersion: v1
kind: Service
metadata:
  name: postgres-staging-service
  namespace: reconciliation-staging
spec:
  selector:
    app: postgres-staging
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
# PostgreSQL Deployment for Staging
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-staging
  namespace: reconciliation-staging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-staging
  template:
    metadata:
      labels:
        app: postgres-staging
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "reconciliation_staging"
        - name: POSTGRES_USER
          value: "reconciliation_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: reconciliation-staging-secrets
              key: DB_PASSWORD
        volumeMounts:
        - name: postgres-staging-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
      volumes:
      - name: postgres-staging-storage
        persistentVolumeClaim:
          claimName: postgres-staging-pvc
---
# PostgreSQL PVC for Staging
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-staging-pvc
  namespace: reconciliation-staging
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# Redis Service for Staging
apiVersion: v1
kind: Service
metadata:
  name: redis-staging-service
  namespace: reconciliation-staging
spec:
  selector:
    app: redis-staging
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
# Redis Deployment for Staging
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-staging
  namespace: reconciliation-staging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-staging
  template:
    metadata:
      labels:
        app: redis-staging
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server", "--requirepass", "$(REDIS_PASSWORD)"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: reconciliation-staging-secrets
              key: REDIS_PASSWORD
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
---
# Backend Service for Staging
apiVersion: v1
kind: Service
metadata:
  name: backend-staging-service
  namespace: reconciliation-staging
spec:
  selector:
    app: backend-staging
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  - name: metrics
    port: 9090
    targetPort: 9090
  - name: websocket
    port: 8081
    targetPort: 8081
  type: ClusterIP
---
# Backend Deployment for Staging
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-staging
  namespace: reconciliation-staging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-staging
  template:
    metadata:
      labels:
        app: backend-staging
    spec:
      containers:
      - name: backend
        image: ghcr.io/your-org/reconciliation-backend:develop
        ports:
        - containerPort: 8080
        - containerPort: 9090
        - containerPort: 8081
        env:
        - name: DATABASE_URL
          value: "postgresql://reconciliation_user:$(DB_PASSWORD)@postgres-staging-service:5432/reconciliation_staging"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-staging-service:6379"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: reconciliation-staging-secrets
              key: DB_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: reconciliation-staging-secrets
              key: REDIS_PASSWORD
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: reconciliation-staging-secrets
              key: JWT_SECRET
        envFrom:
        - configMapRef:
            name: reconciliation-staging-config
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
---
# Frontend Service for Staging
apiVersion: v1
kind: Service
metadata:
  name: frontend-staging-service
  namespace: reconciliation-staging
spec:
  selector:
    app: frontend-staging
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP
---
# Frontend Deployment for Staging
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-staging
  namespace: reconciliation-staging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend-staging
  template:
    metadata:
      labels:
        app: frontend-staging
    spec:
      containers:
      - name: frontend
        image: ghcr.io/your-org/reconciliation-frontend:develop
        ports:
        - containerPort: 3000
        env:
        - name: VITE_API_URL
          value: "https://api-staging.reconciliation.example.com"
        - name: VITE_WS_URL
          value: "wss://ws-staging.reconciliation.example.com"
        envFrom:
        - configMapRef:
            name: reconciliation-staging-config
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
---
# Ingress for Staging
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: reconciliation-staging-ingress
  namespace: reconciliation-staging
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-staging
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - staging.reconciliation.example.com
    - api-staging.reconciliation.example.com
    - ws-staging.reconciliation.example.com
    secretName: reconciliation-staging-tls
  rules:
  - host: staging.reconciliation.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-staging-service
            port:
              number: 3000
  - host: api-staging.reconciliation.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-staging-service
            port:
              number: 8080
  - host: ws-staging.reconciliation.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-staging-service
            port:
              number: 8081
