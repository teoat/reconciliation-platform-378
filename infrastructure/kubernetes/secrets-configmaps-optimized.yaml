# ============================================================================
# SECRETS AND CONFIGMAPS - PRODUCTION CONFIGURATION
# ============================================================================
# Critical: Replace all placeholder values with actual secrets in production!
# ============================================================================

---
# ============================================================================
# Namespace
# ============================================================================
apiVersion: v1
kind: Namespace
metadata:
  name: reconciliation
  labels:
    name: reconciliation
    environment: production

---
# ============================================================================
# Service Account for Backend
# ============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: reconciliation-backend-sa
  namespace: reconciliation

---
# ============================================================================
# ConfigMap for Application Configuration
# ============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: reconciliation-config
  namespace: reconciliation
data:
  # Environment
  NODE_ENV: "production"
  RUST_LOG: "info"
  HOST: "0.0.0.0"
  PORT: "2000"
  
  # Database Connection
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_NAME: "reconciliation_db"
  
  # Redis Connection
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  
  # CORS Configuration
  CORS_ORIGIN: "https://reconciliation.example.com"
  
  # Feature Flags
  ENABLE_METRICS: "true"
  METRICS_PORT: "9091"
  WS_ENABLED: "true"
  WS_PORT: "8080"
  ENABLE_COMPRESSION: "true"
  ENABLE_CACHING: "true"
  
  # Scaling Configuration
  MIN_REPLICAS: "3"
  MAX_REPLICAS: "15"

---
# ============================================================================
# Secrets - CRITICAL: Replace with actual secrets!
# ============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: reconciliation-secrets
  namespace: reconciliation
type: Opaque
data:
  # Base64 encoded values - IMPORTANT: Replace these!
  # To encode: echo -n "your-value" | base64
  database-url: cG9zdGdyZXNxbDovL3VzZXI6cGFzcyBAbG9jYWxob3N0OjU0MzIvZGI=  # Replace!
  redis-url: cmVkaXM6Ly9sb2NhbGhvc3Q6NjM3OQ==  # Replace!
  jwt-secret: Y2hhbmdlLXRoaXMtaW4tcHJvZHVjdGlvbg==  # Replace!
  db-password: cG9zdGdyZXNwYXNz  # Replace!
  redis-password: cmVkaXNwYXNz  # Replace!
  smtp-password: U01UUF9QQVNTV09SRA==  # Replace!
  sentry-dsn: aHR0cHM6Ly8ke2tleX1Ac2VudHJ5LmlvL3tocmVmfA==  # Replace!
  aws-access-key: QVdTX0FjY2Vzc0tleQ==  # Replace!
  aws-secret-key: QVdTX1NlY3JldEtleQ==  # Replace!
  backup-s3-bucket: cmVjb25jaWxpYXRpb24tYmFja3Vwcy  # Replace!

---
# ============================================================================
# Role for Service Account
# ============================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: reconciliation
  name: reconciliation-backend-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
# ============================================================================
# Role Binding
# ============================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: reconciliation-backend-role-binding
  namespace: reconciliation
subjects:
- kind: ServiceAccount
  name: reconciliation-backend-sa
  namespace: reconciliation
roleRef:
  kind: Role
  name: reconciliation-backend-role
  apiGroup: rbac.authorization.k8s.io

---
# ============================================================================
# Persistent Volume Claims
# ============================================================================

---
# PVC for PostgreSQL Data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: reconciliation
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi  # Adjust based on needs
  storageClassName: gp3  # Use your cluster's storage class

---
# PVC for Backend Uploads
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backend-uploads-pvc
  namespace: reconciliation
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi  # Adjust based on needs
  storageClassName: gp3  # Use your cluster's storage class

---
# ============================================================================
# Network Policy - Security Rules
# ============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: reconciliation-network-policy
  namespace: reconciliation
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  # Allow ingress from Ingress Controller
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  # Allow ingress within namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: reconciliation
  # Allow egress to database and redis
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: reconciliation
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 2000  # Backend
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow HTTPS to external services (for monitoring, etc.)
  - to: []
    ports:
    - protocol: TCP
      port: 443

