openapi: 3.0.0
info:
  title: Reconciliation Backend API
  version: 2.0.0
  description: Enterprise-grade reconciliation platform API with comprehensive endpoints
  contact:
    name: API Support
servers:
  - url: http://localhost:2000/api/v1
    description: Local development server
  - url: https://api.reconciliation.platform/api/v1
    description: Production server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management operations
  - name: Projects
    description: Project management operations
  - name: Reconciliation
    description: Reconciliation job operations
  - name: Files
    description: File upload and management
  - name: Analytics
    description: Analytics and statistics
  - name: System
    description: System health and metrics
  - name: GDPR
    description: GDPR compliance endpoints

paths:
  # Authentication endpoints
  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      description: Authenticate user and receive JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      tags: [Authentication]
      summary: Register new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh JWT token
      description: Get a new JWT token using existing valid token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  expires_at:
                    type: integer
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/change-password:
    post:
      tags: [Authentication]
      summary: Change user password
      description: Change password for authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
        '401':
          description: Unauthorized or invalid current password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/password-reset:
    post:
      tags: [Authentication]
      summary: Request password reset
      description: Request password reset token via email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Password reset instructions sent
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/password-reset/confirm:
    post:
      tags: [Authentication]
      summary: Confirm password reset
      description: Reset password using reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, new_password]
              properties:
                token:
                  type: string
                new_password:
                  type: string
      responses:
        '200':
          description: Password reset successfully
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      tags: [Authentication]
      summary: Get current user
      description: Get information about authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User management endpoints
  /users:
    get:
      tags: [Users]
      summary: List users
      description: Get paginated list of users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags: [Users]
      summary: Create user
      description: Create a new user (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - admin only

  /users/{id}:
    get:
      tags: [Users]
      summary: Get user by ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: User not found

    put:
      tags: [Users]
      summary: Update user
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
        '404':
          description: User not found

    delete:
      tags: [Users]
      summary: Delete user
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found

  # Project management endpoints
  /projects:
    get:
      tags: [Projects]
      summary: List projects
      description: Get paginated list of projects
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'

    post:
      tags: [Projects]
      summary: Create project
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /projects/{id}:
    get:
      tags: [Projects]
      summary: Get project by ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: Project information

    put:
      tags: [Projects]
      summary: Update project
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: Project updated successfully

    delete:
      tags: [Projects]
      summary: Delete project
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '204':
          description: Project deleted successfully

  # File upload endpoints
  /files/upload:
    post:
      tags: [Files]
      summary: Upload file
      description: Upload a file for processing (REST compliant - returns 201 with Location header)
      security:
        - bearerAuth: []
      parameters:
        - name: project_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                description:
                  type: string
      responses:
        '201':
          description: File uploaded successfully
          headers:
            Location:
              description: URL of the created file resource
              schema:
                type: string
                example: /api/v1/files/550e8400-e29b-41d4-a716-446655440000
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid file or missing project_id
        '413':
          description: File too large

  /files/{id}:
    get:
      tags: [Files]
      summary: Get file information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: File information
        '404':
          description: File not found

    delete:
      tags: [Files]
      summary: Delete file
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: File deleted successfully
        '404':
          description: File not found

  # Reconciliation endpoints
  /reconciliation/jobs:
    get:
      tags: [Reconciliation]
      summary: List reconciliation jobs
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
      responses:
        '200':
          description: List of reconciliation jobs

    post:
      tags: [Reconciliation]
      summary: Create reconciliation job
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReconciliationJobRequest'
      responses:
        '201':
          description: Reconciliation job created

  /reconciliation/jobs/{id}:
    get:
      tags: [Reconciliation]
      summary: Get reconciliation job
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Reconciliation job information

    put:
      tags: [Reconciliation]
      summary: Update reconciliation job
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReconciliationJobRequest'
      responses:
        '200':
          description: Job updated successfully

    delete:
      tags: [Reconciliation]
      summary: Delete reconciliation job
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Job deleted successfully

  /reconciliation/jobs/{id}/start:
    post:
      tags: [Reconciliation]
      summary: Start reconciliation job
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Job started successfully

  /reconciliation/jobs/{id}/stop:
    post:
      tags: [Reconciliation]
      summary: Stop reconciliation job
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Job stopped successfully

  # Analytics endpoints
  /analytics/dashboard:
    get:
      tags: [Analytics]
      summary: Get dashboard data
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard analytics data

  /analytics/projects/{id}/stats:
    get:
      tags: [Analytics]
      summary: Get project statistics
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: Project statistics

  # System endpoints
  /health:
    get:
      tags: [System]
      summary: Health check
      description: Check if the service is healthy
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                  version:
                    type: string
                  services:
                    type: object

  /ready:
    get:
      tags: [System]
      summary: Readiness check
      description: Check if the service is ready to accept traffic
      responses:
        '200':
          description: Service is ready
        '503':
          description: Service is not ready

  /metrics:
    get:
      tags: [System]
      summary: Prometheus metrics
      description: Get Prometheus-formatted metrics
      responses:
        '200':
          description: Metrics in Prometheus format
          content:
            text/plain:
              schema:
                type: string

  # GDPR endpoints
  /gdpr/export/{user_id}:
    get:
      tags: [GDPR]
      summary: Export user data
      description: Export all data for a user (GDPR compliance)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User data export
        '403':
          description: Forbidden - users can only export their own data

  /gdpr/delete/{user_id}:
    post:
      tags: [GDPR]
      summary: Delete user data
      description: Delete all user data (GDPR right to be forgotten)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '204':
          description: User data deleted
        '403':
          description: Forbidden

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    UserId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: User UUID

    ProjectId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Project UUID

    Page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number for pagination

    PerPage:
      name: per_page
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
      description: Items per page

  schemas:
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    RegisterRequest:
      type: object
      required: [email, password, first_name, last_name]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
          enum: [user, analyst, manager, admin]

    ChangePasswordRequest:
      type: object
      required: [current_password, new_password]
      properties:
        current_password:
          type: string
          format: password
        new_password:
          type: string
          format: password
          minLength: 8

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/UserInfo'
        expires_at:
          type: integer

    UserInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
        is_active:
          type: boolean
        last_login:
          type: string
          format: date-time
          nullable: true

    CreateUserRequest:
      type: object
      required: [email, password, first_name, last_name]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        role:
          type: string
        is_active:
          type: boolean

    CreateProjectRequest:
      type: object
      required: [name, owner_id]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        owner_id:
          type: string
          format: uuid
        status:
          type: string
        settings:
          type: object

    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        status:
          type: string
        settings:
          type: object

    CreateReconciliationJobRequest:
      type: object
      required: [name, source_data_source_id, target_data_source_id, confidence_threshold]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          maxLength: 1000
        source_data_source_id:
          type: string
          format: uuid
        target_data_source_id:
          type: string
          format: uuid
        confidence_threshold:
          type: number
          minimum: 0
          maximum: 1
        settings:
          type: object

    UpdateReconciliationJobRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        confidence_threshold:
          type: number
          minimum: 0
          maximum: 1
        settings:
          type: object

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          nullable: true
        message:
          type: string
          nullable: true
        error:
          type: string
          nullable: true

    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        total:
          type: integer
        page:
          type: integer
        per_page:
          type: integer
        total_pages:
          type: integer

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time
